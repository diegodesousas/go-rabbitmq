// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"

	mock "github.com/stretchr/testify/mock"
)

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: consumer, noWait
func (_m *Channel) Cancel(consumer string, noWait bool) error {
	ret := _m.Called(consumer, noWait)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(consumer, noWait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Channel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Confirm provides a mock function with given fields: noWait
func (_m *Channel) Confirm(noWait bool) error {
	ret := _m.Called(noWait)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(noWait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: queue, consumer, autoAck, exclusive, noLocal, noWait, args
func (_m *Channel) Consume(queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.Called(queue, consumer, autoAck, exclusive, noLocal, noWait, args)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) <-chan amqp.Delivery); ok {
		r0 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyPublish provides a mock function with given fields: confirm
func (_m *Channel) NotifyPublish(confirm chan amqp.Confirmation) chan amqp.Confirmation {
	ret := _m.Called(confirm)

	var r0 chan amqp.Confirmation
	if rf, ok := ret.Get(0).(func(chan amqp.Confirmation) chan amqp.Confirmation); ok {
		r0 = rf(confirm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan amqp.Confirmation)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: exchange, key, mandatory, immediate, msg
func (_m *Channel) Publish(exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.Called(exchange, key, mandatory, immediate, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, amqp.Publishing) error); ok {
		r0 = rf(exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Qos provides a mock function with given fields: prefetch, prefetchSize, global
func (_m *Channel) Qos(prefetch int, prefetchSize int, global bool) error {
	ret := _m.Called(prefetch, prefetchSize, global)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bool) error); ok {
		r0 = rf(prefetch, prefetchSize, global)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
